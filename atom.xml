<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sisyphus&#39;s Blog</title>
  
  
  <link href="https://lsqqqq.github.io/atom.xml" rel="self"/>
  
  <link href="https://lsqqqq.github.io/"/>
  <updated>2021-03-26T07:09:08.014Z</updated>
  <id>https://lsqqqq.github.io/</id>
  
  <author>
    <name>Lyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Torch常用操作——数据集</title>
    <link href="https://lsqqqq.github.io/2021/03/26/Torch%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <id>https://lsqqqq.github.io/2021/03/26/Torch%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E9%9B%86/</id>
    <published>2021-03-26T07:08:32.000Z</published>
    <updated>2021-03-26T07:09:08.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Torch常用操作——数据集"><a href="#Torch常用操作——数据集" class="headerlink" title="Torch常用操作——数据集"></a>Torch常用操作——数据集</h2><p>读取mnist示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> ToTensor, Lambda</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">training_data = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_data = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可以使用Dataloader来按照batch随机读取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">train_dataloader = DataLoader(training_data, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>查看读取的数据详情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">train_features, train_labels = <span class="built_in">next</span>(<span class="built_in">iter</span>(train_dataloader))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Feature batch shape: <span class="subst">&#123;train_features.size()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Labels batch shape: <span class="subst">&#123;train_labels.size()&#125;</span>&quot;</span>)</span><br><span class="line">img = train_features[<span class="number">0</span>].squeeze()</span><br><span class="line">label = train_labels[<span class="number">0</span>]</span><br><span class="line">plt.imshow(img, cmap=<span class="string">&quot;gray&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Label: <span class="subst">&#123;label&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Torch常用操作——数据集&quot;&gt;&lt;a href=&quot;#Torch常用操作——数据集&quot; class=&quot;headerlink&quot; title=&quot;Torch常用操作——数据集&quot;&gt;&lt;/a&gt;Torch常用操作——数据集&lt;/h2&gt;&lt;p&gt;读取mnist示例&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Torch常用操作——数据结构</title>
    <link href="https://lsqqqq.github.io/2021/03/26/Torch%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://lsqqqq.github.io/2021/03/26/Torch%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-03-26T07:08:21.000Z</published>
    <updated>2021-03-26T07:08:51.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Torch常用操作——数据结构"><a href="#Torch常用操作——数据结构" class="headerlink" title="Torch常用操作——数据结构"></a>Torch常用操作——数据结构</h2><p>pytorch采用的数据结构是tensor，类似于numpy的ndarray，并且可以和ndarray之间进行灵活的转换。与ndarray不同，tensor可以在gpu上运行，从而利用显卡的性能。</p><p>依赖库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>tensor初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 直接初始化</span></span><br><span class="line">data = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">x_data = torch.tensor(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 从numpy array初始化</span></span><br><span class="line">np_array = np.array(data)</span><br><span class="line">x_np = torch.from_numpy(np_array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 从另外一个tensor初始化</span></span><br><span class="line">x_ones = torch.ones_like(x_data) <span class="comment"># 创建一个和x_data形状相同的全1矩阵</span></span><br><span class="line">x_rand = torch.rand_like(x_data, dtype=torch.<span class="built_in">float</span>) <span class="comment"># 创建一个形状和x_data相同的随机数矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 生成指定形状，满足一定规律的矩阵</span></span><br><span class="line">shape = (<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">rand_tensor = torch.rand(shape)<span class="comment"># 随机数矩阵</span></span><br><span class="line">ones_tensor = torch.ones(shape)<span class="comment">#全1阵</span></span><br><span class="line">zeros_tensor = torch.zeros(shape)<span class="comment">#全0阵</span></span><br></pre></td></tr></table></figure><p>tensor的参数和操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">tensor = torch.rand(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">tensor_1 = torch.ones(<span class="number">4</span>, <span class="number">4</span>) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tensor参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Shape of tensor: <span class="subst">&#123;tensor.shape&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Datatype of tensor: <span class="subst">&#123;tensor.dtype&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Device tensor is stored on: <span class="subst">&#123;tensor.device&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引和切片</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;First row: &#x27;</span>,tensor[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;First column: &#x27;</span>, tensor[:, <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Last column:&#x27;</span>, tensor[..., -<span class="number">1</span>])</span><br><span class="line">tensor[:,<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式从tensor转回numpy</span></span><br><span class="line">tensor.numpy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并多个tensor（dim=1时横向拼接，为0时纵向）</span></span><br><span class="line">t1 = torch.cat([tensor, tensor, tensor], dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全体元素加某个值</span></span><br><span class="line">tensor.add_(<span class="number">5</span>)</span><br><span class="line">tensor += <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵乘法（此处举例自己乘自己）（z1=z2=z3）</span></span><br><span class="line">z1 = tensor * tensor</span><br><span class="line">z2 = tensor.mul(tensor)</span><br><span class="line">z3 = torch.rand_like(tensor)</span><br><span class="line">torch.mul(tensor, tensor, out=z3)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>gpu相关操作</p><blockquote><p>此处重点参考：</p><p><a class="link"   href="https://tangshusen.me/Dive-into-DL-PyTorch/#/chapter04_DL_computation/4.6_use-gpu" >https://tangshusen.me/Dive-into-DL-PyTorch/#/chapter04_DL_computation/4.6_use-gpu<i class="fas fa-external-link-alt"></i></a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查gpu是否可用，可用返回True</span></span><br><span class="line">torch.cuda.is_available()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把tensor放入gpu</span></span><br><span class="line">tensor = tensor.to(<span class="string">&#x27;cuda&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 查看gpu数量</span></span><br><span class="line">torch.cuda.device_count()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前gpu索引号，从0开始</span></span><br><span class="line">torch.cuda.current_device()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据索引号查看gpu名</span></span><br><span class="line">torch.cuda.get_device_name(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tensor所在的gpu情况</span></span><br><span class="line"><span class="comment"># 输出： device(type=&#x27;cuda&#x27;, index=0)</span></span><br><span class="line">x.device</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把变量从一个gpu转移到另一个gpu</span></span><br><span class="line">x = x.cuda(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建变量时指定gpu或cpu</span></span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">x = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], device=device)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">x = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).to(device)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Torch常用操作——数据结构&quot;&gt;&lt;a href=&quot;#Torch常用操作——数据结构&quot; class=&quot;headerlink&quot; title=&quot;Torch常用操作——数据结构&quot;&gt;&lt;/a&gt;Torch常用操作——数据结构&lt;/h2&gt;&lt;p&gt;pytorch采用的数据结构是ten</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>服务器硬件及驱动检测</title>
    <link href="https://lsqqqq.github.io/2021/03/26/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6%E5%8F%8A%E9%A9%B1%E5%8A%A8%E6%A3%80%E6%B5%8B/"/>
    <id>https://lsqqqq.github.io/2021/03/26/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6%E5%8F%8A%E9%A9%B1%E5%8A%A8%E6%A3%80%E6%B5%8B/</id>
    <published>2021-03-26T06:47:01.000Z</published>
    <updated>2021-03-26T06:47:50.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器硬件及驱动检测"><a href="#服务器硬件及驱动检测" class="headerlink" title="服务器硬件及驱动检测"></a>服务器硬件及驱动检测</h2><blockquote><p>参考：<a class="link"   href="https://junchu.blog.csdn.net/article/details/105271986" >https://junchu.blog.csdn.net/article/details/105271986<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>查看服务器型号和主板型号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dmidecode |grep -A16 <span class="string">&quot;System Information$&quot;</span></span><br></pre></td></tr></table></figure><p>查看CPU和超线程信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CPU型号</span></span><br><span class="line">cat /proc/cpuinfo | grep name | uniq</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 物理CPU个数</span></span><br><span class="line">cat /proc/cpuinfo| grep <span class="string">&quot;physical id&quot;</span>| sort| uniq | wc -l</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 每个物理CPU的ID</span></span><br><span class="line">cat /proc/cpuinfo | grep <span class="string">&quot;physical id&quot;</span> | sort | uniq</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 每个物理CPU的物理核数</span></span><br><span class="line">cat /proc/cpuinfo| grep <span class="string">&quot;cpu cores&quot;</span>| uniq</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 逻辑总核数</span></span><br><span class="line">cat /proc/cpuinfo| grep <span class="string">&quot;processor&quot;</span>| wc -l</span><br></pre></td></tr></table></figure><p>查看内存信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看内存和swap总大小</span></span><br><span class="line">free -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内存条大小，结果中Size：后面的就是每一根物理内存条和容量</span></span><br><span class="line">sudo dmidecode|grep -A16 <span class="string">&quot;Memory Device&quot;</span>|grep <span class="string">&#x27;Size&#x27;</span>| sort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内存频率</span></span><br><span class="line">sudo dmidecode|grep -A16 <span class="string">&quot;Memory Device&quot;</span>|grep <span class="string">&#x27;Speed&#x27;</span>|sort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内存品牌</span></span><br><span class="line">sudo dmidecode --<span class="built_in">type</span> 17 | grep Manufacturer | sort</span><br></pre></td></tr></table></figure><p>查看硬盘信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看每个硬盘的信息，包括挂载情况</span></span><br><span class="line">lsblk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 区分固态和机械硬盘：为1表示机械HDD，为0可能为SSD</span></span><br><span class="line">lsblk -d -o name,rota</span><br></pre></td></tr></table></figure><p>检查显卡信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep -i vga</span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>NVIDIA GPU压力测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wilicc/gpu-burn</span><br><span class="line"><span class="built_in">cd</span> gpu-burn</span><br><span class="line">make</span><br><span class="line"><span class="comment"># 压力测试60秒，不带参数默认应该是10秒</span></span><br><span class="line">./gpu_burn 60</span><br></pre></td></tr></table></figure><p>查看电源情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dmidecode | grep Power</span><br></pre></td></tr></table></figure><h3 id="安装stress进行压测"><a href="#安装stress进行压测" class="headerlink" title="安装stress进行压测"></a>安装stress进行压测</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cpu压测：吃满80核</span></span><br><span class="line">stress -c 80</span><br><span class="line"><span class="comment"># 内存压测：吃满最多1T内存</span></span><br><span class="line">stress --vm 10 --vm-bytes 10G --vm-hang 100 --timeout 100s</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;服务器硬件及驱动检测&quot;&gt;&lt;a href=&quot;#服务器硬件及驱动检测&quot; class=&quot;headerlink&quot; title=&quot;服务器硬件及驱动检测&quot;&gt;&lt;/a&gt;服务器硬件及驱动检测&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a class=&quot;link&quot;   href</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lsqqqq.github.io/2021/03/25/hello-world/"/>
    <id>https://lsqqqq.github.io/2021/03/25/hello-world/</id>
    <published>2021-03-25T15:25:27.804Z</published>
    <updated>2021-03-25T15:25:27.804Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
